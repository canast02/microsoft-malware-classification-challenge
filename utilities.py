from ctypes import cast

__author__ = 'chrysovalantis'

import math
import numpy as np
from csv import reader, writer
import six


def read_labels(file):
    print('loading labels')

    # read train labels
    labels = {}
    with open(file) as f:
        next(f)  # Ignoring header
        for row in reader(f):
            labels[row[0]] = int(row[1])

    print('labels loaded')

    return labels


def read_train(ntrain, nfeature, labels, file):
    print('loading train file')

    train = np.zeros((ntrain, nfeature), dtype=int)
    with open(file) as f:
        next(f)  # Ignoring header
        for t, row in enumerate(reader(f)):
            train[t, :-1] = map(int, row[1:]) if six.PY2 else list(map(int, row[1:]))
            train[t, -1] = labels[row[0]]
            if (t + 1) % 1000 == 0:
                print((t + 1) * 100.0 / ntrain, '% of records loaded')

    print('training set loaded')

    return train


def read_test(ntest, nfeature, file):
    print('loading test set')

    test = np.zeros((ntest, nfeature), dtype=int)
    ids = []  # Required test set ids

    with open(file) as f:
        next(f)  # Ignoring header
        for t, row in enumerate(reader(f)):
            test[t, :] = map(int, row[1:]) if six.PY2 else list(map(int, row[1:]))
            ids.append(row[0])
            if (t + 1) % 1000 == 0:
                print(t + 1, 'records loaded')

    print('test set loaded')

    return test, ids


def log_loss(X, y):
    sum = 0.0
    for i in range(len(X)):
        if X[i, y[i]-1] < 0.1:
            print('mispredicted: class = ', y[i], 'prob = ', X[i, y[i]-1])
        pred = max(min(X[i, y[i]-1], 1 - 10E-15), 10E-15)
        sum += math.log(pred)

    logloss = - (sum / len(X))

    return logloss


def avg_proba2(proba1, proba2):
    avg = np.zeros((len(proba1), len(proba1[0])), dtype=float)
    for i in range(len(avg)):
        for j in range(len(avg[0])):
            avg[i, j] = (proba1[i, j] + proba2[i, j]) / 2.0

    return avg


def avg_proba3(proba1, proba2, proba3):
    avg = np.zeros((len(proba1), len(proba1[0])), dtype=float)
    for i in range(len(avg)):
        for j in range(len(avg[0])):
            avg[i, j] = (proba1[i, j] + proba2[i, j] + proba3[i, j]) / 3.0

    return avg


def avg_proba4(proba1, proba2, proba3, proba4):
    avg = np.zeros((len(proba1), len(proba1[0])), dtype=float)
    for i in range(len(avg)):
        for j in range(len(avg[0])):
            avg[i, j] = (proba1[i, j] + proba2[i, j] + proba3[i, j] + proba4[i, j]) / 4.0

    return avg